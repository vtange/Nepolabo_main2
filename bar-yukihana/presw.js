var ttt = ttt || Object.create(null);
var ytplayer;
function onYouTubeIframeAPIReady() {
    if (document.getElementById("ytplayer")) {
        ytplayer = new YT.Player('ytplayer', {
            videoId: 'scLmT5Nr9zg',
            playerVars: {
                'playsinline': 1
            },
            events: {
                'onStateChange': onPlayerStateChange
            }
            });
    } else {
        window.setTimeout(onYouTubeIframeAPIReady, 200);
    }
}
// event that will be fired when the state of the video player changes
function onPlayerStateChange(event) {
    if(event.data == -1 || event.data == 1) {
      // unstarted or playing
      if (ttt && ttt.bgm && typeof ttt.bgm.setVolume === "function") {
          ttt.bgm.setVolume(0);
          ttt.video = ytplayer;
      }
    } else if (event.data == 0 || event.data == 2) {
      // stopped or paused
      if (ttt && ttt.bgm && typeof ttt.bgm.setVolume === "function") {
          ttt.bgm.setVolume(0.2);
          ttt.video = null;
      }
    }
  }

(function(){
  var d0c = document;
  function mainjsLoaded() {
      var arrScripts = d0c.body.getElementsByTagName("script");
      for(var i = 0; i < arrScripts.length; i++)
      {
          if(arrScripts[i].src.lastIndexOf("vendors~main") != -1)
          {
              return true;
          }
      }
      return false;
  }
  function addBundleJS() {
      //hashes is autogenerated by webpack, should be in html <script> right before this script.
      if(!mainjsLoaded() && hashes)
      {
          var vendors = d0c.createElement("script");
          var script = d0c.createElement("script");
          if(hashes["main"]["css"])//note: in inject_mode this will be undefined
          {
              var css = d0c.createElement("link");
              css.rel = "stylesheet";
              css.href = './' + hashes["main"]["css"];
              d0c.head.appendChild(css);
          }
          vendors.src = './' + hashes["vendors~main"]["js"];
          script.src = './' + hashes["main"]["js"];
          d0c.body.appendChild(vendors);
          d0c.body.appendChild(script);
      }
  }
  function check_webgl() {
      try {
          var tempcanvas = d0c.createElement("canvas");
          var gl = tempcanvas.getContext("webgl") || tempcanvas.getContext("experimental-webgl");
          return gl != null && !!window.WebGLRenderingContext;
      }
      catch (e) {
          return false;
      }
  };
  document.getElementById("nojs-cover").style.display = "none";
  //WebGL
  if(!check_webgl()) {
      return;
  }

  addBundleJS();
  })();